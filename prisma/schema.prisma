generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  name         String
  role         Role          @default(STUDENT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  enrollments  Enrollment[]
  progresses   Progress[]
  moduleProgresses ModuleProgress[]
  certificates Certificate[]
  Course       Course[]
}

model Course {
  id           String        @id @default(cuid())
  slug         String        @unique
  title        String
  description  String
  category     String
  level        String
  thumbnailUrl String?
  durationS    Int           @default(0)
  priceCents   Int           @default(0)
  visibility   Visibility    @default(PUBLIC)
  instructor   User          @relation(fields: [instructorId], references: [id])
  instructorId String
  modules      Module[]
  lessons      Lesson[]
  enrollments  Enrollment[]
  ratingAvg    Float         @default(0)
  ratingCount  Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Certificate  Certificate[]
}

model Module {
  id       String   @id @default(cuid())
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  title    String
  position Int
  lessons  Lesson[]
  progresses ModuleProgress[]
}

model Lesson {
  id        String     @id @default(cuid())
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  String
  module    Module?    @relation(fields: [moduleId], references: [id])
  moduleId  String?
  title     String
  videoUrl  String
  durationS Int
  position  Int
  resources Json?
  Progress  Progress[]
}

model Enrollment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Progress {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model ModuleProgress {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  module    Module   @relation(fields: [moduleId], references: [id])
  moduleId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, moduleId])
}

model Certificate {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  code     String   @unique
  issuedAt DateTime @default(now())

  @@unique([userId, courseId])
}
